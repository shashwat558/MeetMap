// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id       String  @id @unique @default(cuid())
  username String  @unique
  password String  
  avatarId String?
  role     Role
  space    Space[]
  avatar   Avatar? @relation(fields: [avatarId], references: [id])
}

model Space {
  id          String  @id @unique @default(cuid())
  name        String
  width       Int
  height      Int
  thumbnail   String?
  spaceElement spaceElements[]
  creatorId    String
  creator     User @relation(fields: [creatorId], references: [id])
}

model spaceElements {
  id        String @id @unique @default(cuid())
  elementId String
  spaceId   String
  space     Space @relation(fields: [spaceId], references: [id])
  element   Element @relation(fields: [elementId], references: [id])
  x         Int
  y         Int
}

model Element {
  id               String @id @unique @default(cuid())
  width            Int
  height           Int
  spaces           spaceElements[]
  mapElementsId    MapElements[]
  imageUrl String
  static           Boolean
}

model Map {
  id           String  @id @unique @default(cuid())
  width        Int
  height       Int
  name         String
  thumbnail    String
  mapElement   MapElements[]
}

model MapElements {
  id        String  @id @unique @default(cuid())
  mapId     String
  map       Map @relation(fields: [mapId], references: [id])
  elementId String
  element   Element @relation(fields: [elementId], references: [id])
  x         Int
  y         Int
}

model Avatar {
  id       String  @id @unique @default(cuid())
  imageUrl String?
  name     String?
  userAvatar  User[]
  
}

enum Role {
  Admin
  User
}